name: 🧬 siRNA Design Toolkit CI/CD

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  lint:
    name: 🔎 Lint & Typecheck
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        python-version: '3.11'
        enable-cache: true
        cache-suffix: lint

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.11-
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: uv pip install --system -r pyproject.toml --editable . --group dev

    - name: 🔍 Lint with ruff
      run: ruff check src tests

    - name: 🎨 Check formatting with ruff
      run: ruff format --check src tests

    - name: 🔬 Type check with mypy
      run: mypy src

    - name: 🛡️ Security scan with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt || echo "Bandit found security issues - check bandit-report.json"

    - name: 🔐 Security check with safety
      run: |
        # Try safety check, create empty report if it fails due to dependency issues
        safety check --json --output safety-report.json || echo '{"report": [], "vulnerabilities": []}' > safety-report.json
        safety check || echo "Safety found vulnerabilities - check safety-report.json"

    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

    - name: 📚 Validate documentation build
      run: |
        uv run --group dev sphinx-build -W -b html docs docs/_build/html
        echo "✅ Documentation builds without warnings"

  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        python-version: ${{ matrix.python-version }}
        enable-cache: true
        cache-suffix: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: uv pip install --system -r pyproject.toml --editable . --group dev

    - name: 🧪 Run tests with pytest
      env:
        SIRNAFORGE_USE_LOCAL_EXECUTION: true
      run: pytest --cov=sirnaforge --cov-report=xml

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'

  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: build

    - name: 🧰 Install build dependencies
      run: |
        uv pip install --system build twine
        uv pip install --system -r pyproject.toml --editable . --group dev

    - name: 🏗️ Build package
      run: python -m build

    - name: 🔍 Check package integrity
      run: python -m twine check dist/*

    - name: 🧪 Test package installation
      run: |
        python -m pip install dist/*.whl
        sirnaforge --help

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ github.sha }}
        path: dist/
        retention-days: 30

  publish:
    name: 🚀 Publish Package
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/p/sirnaforge
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: python-package-${{ github.sha }}
        path: dist/

    - name: 🚀 Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' || (github.event_name == 'release' && github.event.action == 'published')
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: docs

    - name: 📦 Install dependencies
      run: uv pip install --system -r pyproject.toml --editable . --group docs

    - name: 🏗️ Build documentation
      run: |
        make docs-full-ci
        touch docs/_build/html/.nojekyll

    - name: Setup Pages
      uses: actions/configure-pages@v5

    - name: 📤 Upload Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_build/html

    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
