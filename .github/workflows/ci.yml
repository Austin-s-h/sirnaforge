name: siRNA Design Toolkit CI/CD

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]
  workflow_call:
    outputs:
      ci-success:
        description: "Main CI workflow completed successfully"
        value: ${{ jobs.final-status.outputs.success }}

env:
  PYTHON_VERSION: "3.11"

permissions:
  contents: read
  packages: read

jobs:
  lint-and-security:
    name: Lint & Security Check
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: lint

    - name: Install dependencies
      run: uv sync --group dev

    - name: Lint & format check (Make target)
      run: make lint

    - name: Security checks (Make target)
      run: make security

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  test-matrix:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: test-${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --group dev

    - name: Run tests (Make target)
      run: make test-ci

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-py${{ matrix.python-version }}-${{ github.sha }}
        path: |
          pytest-report.xml
          coverage.xml
        retention-days: 30

  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: build

    - name: Install dependencies
      run: uv sync --group dev

    - name: Build package (Make target)
      run: make build

    - name: Verify installation
      run: |
        # Test basic import and CLI functionality
        uv run sirnaforge version
        uv run sirnaforge --help
        # Quick validation that core modules import correctly
        uv run python -c "
        import sirnaforge
        from sirnaforge.core import SiRNACandidate
        from sirnaforge.models import GeneSearchResult
        print('Package imports successfully')
        "
        # Verify CLI responds correctly
        sirnaforge version

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ github.sha }}
        path: dist/
        retention-days: 7

  final-status:
    name: CI Status Summary
    runs-on: ubuntu-latest
    needs: [lint-and-security, test-matrix, build-package]
    if: always()
    outputs:
      success: ${{ steps.status.outputs.success }}

    steps:
    - name: Check status
      id: status
      run: |
        echo "Checking job statuses..."

        LINT_STATUS="${{ needs.lint-and-security.result }}"
        TEST_STATUS="${{ needs.test-matrix.result }}"
        BUILD_STATUS="${{ needs.build-package.result }}"

        echo "Lint & Security: $LINT_STATUS"
        echo "Tests: $TEST_STATUS"
        echo "Build: $BUILD_STATUS"

        if [[ "$LINT_STATUS" == "success" && "$TEST_STATUS" == "success" && "$BUILD_STATUS" == "success" ]]; then
          echo "All CI jobs passed!"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "Some CI jobs failed!"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        fi
