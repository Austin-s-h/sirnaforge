name: 🧬 siRNA Design Toolkit CI/CD

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
permissions:
  contents: read

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.12"]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        python-version: ${{ matrix.python-version }}
        enable-cache: true
        cache-suffix: ${{ matrix.python-version }}

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: uv sync --all-groups

    - name: 🔍 Lint with ruff
      run: ruff check src tests

    - name: 🎨 Check formatting with black
      run: black --check src tests

    - name: 🔬 Type check with mypy
      run: mypy src

    - name: 🧪 Run tests with pytest
      run: pytest --cov=sirnaforge --cov-report=xml

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'

  test-py311:
    name: 🧪 Test Suite (py3.11)
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        python-version: '3.11'
        enable-cache: true
        cache-suffix: '3.11'

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-3.11-${{ hashFiles('**/pyproject.toml','**/uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-pip-3.11-
          ${{ runner.os }}-pip-

    - name: 📦 Install dependencies
      run: uv sync --all-groups

    - name: 🔍 Lint with ruff
      run: ruff check src tests

    - name: 🎨 Check formatting with black
      run: black --check src tests

    - name: 🔬 Type check with mypy
      run: mypy src

    - name: 🧪 Run tests with pytest
      run: pytest --maxfail=1 --disable-warnings -q --cov=sirnaforge --cov-report=xml

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3

  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    needs: test-py311

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: 🏗️ Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run fast unit tests in Docker
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        target: unit-test
        push: false

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false

    - name: 📦 Install dependencies
      run: uv sync --all-groups

    - name: 🛡️ Run Bandit security scan
      run: bandit -r src/ -f json -o bandit-report.json

    - name: 🔐 Run Safety check
      run: safety check --json --output safety-report.json

    - name: 📤 Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    name: 📦 Build Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false

    - name: 🧰 Install build deps
      run: uv sync --all-groups

    - name: 🏗️ Build package
      run: python -m build

    - name: 🧪 Test package installation
      run: |
        python -m pip install dist/*.whl
        sirna --version

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  # publish job moved to .github/workflows/publish.yml to isolate secret usage

  deploy-docs:
    name: 📚 Deploy Documentation
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false

    - name: 📦 Install dependencies
      run: uv sync --all-groups

    - name: 🏗️ Build documentation
      run: sphinx-build docs docs/_build/html

    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs/_build/html
