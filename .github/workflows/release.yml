name: 🚀 Release siRNAforge

on:
    workflow_dispatch:
        inputs:
            version:
              description: 'Release version (e.g., v0.1.0)'
              required: true
              type: string
            prerelease:
              description: 'Mark as pre-release'
              required: false
              default: true
              type: boolean
            push_images:
              description: 'Push Docker images to registries'
              required: false
              default: true
              type: boolean
            publish_pypi:
              description: 'Publish package to PyPI (requires Trusted Publisher configured)'
              required: false
              default: false
              type: boolean
            publish_testpypi:
              description: 'Publish package to TestPyPI (for validation)'
              required: false
              default: false
              type: boolean
            deploy_docs_release:
              description: 'Build & deploy docs as part of release'
              required: false
              default: true
              type: boolean

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io

permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write

jobs:
  validate-release:
    name: 🔍 Validate Release Input
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.content }}
      repository-lower: ${{ steps.repo.outputs.repository }}
      owner-lower: ${{ steps.repo.outputs.owner }}
      name-lower: ${{ steps.repo.outputs.name }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Validate version format
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        VERSION=${VERSION#v}  # Remove 'v' prefix if present
        echo "version=$VERSION" >> $GITHUB_OUTPUT

        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: X.Y.Z or X.Y.Z-suffix"
          exit 1
        fi
        echo "✅ Version format valid: $VERSION"

    - name: 🔍 Check if version already exists
      run: |
        VERSION="v${{ steps.version.outputs.version }}"
        if git ls-remote --tags origin | grep -q "refs/tags/$VERSION$"; then
          echo "❌ Tag $VERSION already exists"
          exit 1
        fi
        echo "✅ Version $VERSION is available"

    - name: 🔡 Normalize repository identifiers
      id: repo
      run: |
        REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
        OWNER_LOWER=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
        NAME_LOWER=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')

        echo "repository=$REPO_LOWER" >> $GITHUB_OUTPUT
        echo "owner=$OWNER_LOWER" >> $GITHUB_OUTPUT
        echo "name=$NAME_LOWER" >> $GITHUB_OUTPUT

    - name: 📊 Gather project statistics
      id: stats
      run: |
        # Count code files and tests
        PY_FILES=$(find src/ -name "*.py" | wc -l)
        TEST_FILES=$(find tests/ -name "*.py" | wc -l)
        TOTAL_LINES=$(find src/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')

        # Get Docker image size (if available locally)
        DOCKER_SIZE="Unknown"
        if docker image inspect sirnaforge:latest >/dev/null 2>&1; then
          DOCKER_SIZE=$(docker image inspect sirnaforge:latest --format='{{.Size}}' | numfmt --to=iec-i --suffix=B)
        fi

        # Count CLI commands available
        CLI_COMMANDS="7"  # search, workflow, design, validate, config, cache, version

        echo "py_files=$PY_FILES" >> $GITHUB_OUTPUT
        echo "test_files=$TEST_FILES" >> $GITHUB_OUTPUT
        echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
        echo "docker_size=$DOCKER_SIZE" >> $GITHUB_OUTPUT
        echo "cli_commands=$CLI_COMMANDS" >> $GITHUB_OUTPUT

    - name: 📋 Generate comprehensive release notes
      id: changelog
      env:
        VERSION: ${{ steps.version.outputs.version }}
        PY_FILES: ${{ steps.stats.outputs.py_files }}
        TEST_FILES: ${{ steps.stats.outputs.test_files }}
        TOTAL_LINES: ${{ steps.stats.outputs.total_lines }}
        CLI_COMMANDS: ${{ steps.stats.outputs.cli_commands }}
        DOCKER_SIZE: ${{ steps.stats.outputs.docker_size }}
      run: |
        python .github/scripts/generate_release_notes.py

  # Call the main CI workflow to ensure quality
  run-ci:
    name: 🧪 Run Main CI Pipeline
    needs: validate-release
    uses: ./.github/workflows/ci.yml

  # Run comprehensive release tests with full coverage
  test-release:
    name: 🧪 Comprehensive Release Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-release, run-ci]
    if: needs.run-ci.result == 'success'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: test-release

    - name: 📦 Install all dependencies
      run: uv sync --dev

    - name: 🧪 Run comprehensive test suite with coverage
      run: make test-release

    - name: 📊 Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-release-${{ needs.validate-release.outputs.version }}
        path: |
          coverage.xml
          htmlcov/
          pytest-report.xml
        retention-days: 30

    - name: 📈 Coverage summary
      if: always()
      run: |
        echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        uv run coverage report --format=markdown >> $GITHUB_STEP_SUMMARY || echo "Coverage report not available" >> $GITHUB_STEP_SUMMARY

  # Build Python distribution artifacts once (reusable by PyPI/TestPyPI)
  build-artifacts:
    name: 📦 Build Python Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, run-ci, test-release]
    if: needs.test-release.result == 'success'
    outputs:
      version: ${{ needs.validate-release.outputs.version }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: ⚡ Install uv CLI
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: false
          enable-cache: true
          cache-suffix: build-dist
      - name: 🔧 Build (sdist + wheel)
        run: |
          uv build
          ls -lh dist/
      - name: 🔍 Verify metadata (twine check)
        run: uv run --with twine twine check dist/*
      - name: 📤 Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-dist-${{ needs.validate-release.outputs.version }}
          path: dist/
          retention-days: 7

  # Build and test Docker images only after CI passes
  build-docker:
    name: 🐳 Build & Test Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [validate-release, run-ci, test-release]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name:  Generate Docker metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}
        tags: |
          type=raw,value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=siRNAforge
          org.opencontainers.image.description=siRNA design and analysis toolkit
          org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}
          org.opencontainers.image.url=https://github.com/${{ needs.validate-release.outputs.owner-lower }}/${{ needs.validate-release.outputs.name-lower }}
          org.opencontainers.image.source=https://github.com/${{ needs.validate-release.outputs.owner-lower }}/${{ needs.validate-release.outputs.name-lower }}

    - name: 🐳 Build Docker image (don't push yet)
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        outputs: type=docker,dest=/tmp/sirnaforge-image.tar
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 🧪 Test Docker image functionality using make
      run: |
        # Load the built image
        docker load --input /tmp/sirnaforge-image.tar

        # Tag the image to match what the Makefile expects (sirnaforge:latest)
        REGISTRY_IMAGE="${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }}"
        docker tag "$REGISTRY_IMAGE" sirnaforge:latest

        echo "🧪 Tagged image: $REGISTRY_IMAGE -> sirnaforge:latest"

        echo "🧪 Running Docker container validation tests..."
        # The Docker container uses its own conda environment with all bioinformatics tools
        # The Makefile automatically handles UV cache mounting based on environment
        make docker-test

        echo "✅ Docker image tests passed!"

    - name: 📤 Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ needs.validate-release.outputs.version }}
        path: /tmp/sirnaforge-image.tar
        retention-days: 1

  # Run Docker smoke tests (must always pass)
  test-docker-smoke:
    name: 🧪 Docker Smoke Tests (Critical)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, build-docker]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: docker-smoke

    - name: 📦 Install test dependencies
      run: uv sync --group dev

    - name: 📥 Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image-${{ needs.validate-release.outputs.version }}
        path: /tmp/

    - name: 🐳 Load and run smoke tests (MUST PASS)
      run: |
        # Load the image
        docker load --input /tmp/sirnaforge-image.tar

        # Set environment variable for tests
        export SIRNAFORGE_DOCKER_IMAGE="${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }}"

        # Run smoke tests - these MUST pass for any release
        echo "🔥 Running critical smoke tests..."
        uv run --group dev pytest tests/docker/ -v --tb=short -m "docker and smoke" --maxfail=1
        echo "✅ All smoke tests passed - Docker image is functional"

  # Run Docker integration tests (can fail in pre-release)
  test-docker-integration:
    name: 🧪 Docker Integration Tests (Can fail in pre-release)
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-release, build-docker, test-docker-smoke]
    continue-on-error: ${{ github.event.inputs.prerelease == 'true' }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: ⚡ Install uv CLI
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
        cache-suffix: docker-integration

    - name: 📦 Install test dependencies
      run: uv sync --group dev

    - name: 📥 Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image-${{ needs.validate-release.outputs.version }}
        path: /tmp/

    - name: 🐳 Load and run integration tests
      run: |
        # Load the image
        docker load --input /tmp/sirnaforge-image.tar

        # Set environment variable for tests
        export SIRNAFORGE_DOCKER_IMAGE="${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }}"

        # Run integration tests - these can fail in pre-release
        echo "🧪 Running integration tests..."
        if [ "${{ github.event.inputs.prerelease }}" == "true" ]; then
          echo "⚠️ Pre-release mode: Integration test failures will not block release"
          uv run --group dev pytest tests/docker/ -v --tb=short -m "docker and not smoke" --maxfail=5 || echo "⚠️ Some integration tests failed (acceptable for pre-release)"
        else
          echo "🔒 Full release mode: Integration tests must pass"
          uv run --group dev pytest tests/docker/ -v --tb=short -m "docker and not smoke" --maxfail=3
        fi

  # Create GitHub release after smoke tests pass (integration can fail in pre-release)
  create-release:
    name: 🏷️ Create GitHub Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, run-ci, test-docker-smoke]
    # Allow release creation even if integration tests fail in pre-release mode
    if: always() && needs.test-docker-smoke.result == 'success' && needs.run-ci.result == 'success'
    outputs:
      release-id: ${{ steps.create.outputs.id }}
      release-url: ${{ steps.create.outputs.html_url }}

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🏷️ Create Git tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        VERSION="v${{ needs.validate-release.outputs.version }}"
        git tag -a "$VERSION" -m "Release $VERSION"
        git push origin "$VERSION"

        echo "✅ Created and pushed tag: $VERSION"

    - name: 🚀 Create GitHub Release
      id: create
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ needs.validate-release.outputs.version }}
        release_name: siRNAforge v${{ needs.validate-release.outputs.version }}
        body: |
          # 🧬 siRNAforge v${{ needs.validate-release.outputs.version }}

          **Comprehensive siRNA design toolkit with multi-species off-target analysis**

          ${{ needs.validate-release.outputs.changelog }}

          ## 📦 Installation Options

          ### 🐳 Docker (Recommended - Complete Environment)
          ```bash
          # Pull the latest release
          docker pull ${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }}

          # Quick test - should complete in ~2 seconds
          docker run --rm ${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }} sirnaforge --help
          ```

          ### 🐍 Python Package (Requires external tools for full functionality)
          ```bash
          # Via pip
          pip install sirnaforge==${{ needs.validate-release.outputs.version }}

          # Via uv (recommended for speed)
          uv add sirnaforge==${{ needs.validate-release.outputs.version }}

          # Verify installation
          sirnaforge --help
          ```

          ### 🛠️ Development Installation
          ```bash
          # Clone repository
          git clone https://github.com/${{ needs.validate-release.outputs.repository-lower }}.git
          cd sirnaforge

          # Fast setup with uv (60-120 seconds)
          uv sync --dev

          # Verify with quick tests
          make test-dev  # ~15 seconds
          ```

          ## 🚀 Usage Examples

          ### Basic Workflow (Docker)
          ```bash
          # Complete gene-to-siRNA workflow
          docker run --rm -v $(pwd):/workspace -w /workspace \
            ${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }} \
            sirnaforge workflow TP53 --output-dir results --genome-species human

          # Custom transcript file
          docker run --rm -v $(pwd):/workspace -w /workspace \
            ${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }} \
            sirnaforge design transcripts.fasta --output results.csv
          ```

          ### Python API Usage
          ```python
          from sirnaforge import SiRNADesigner, GeneSearcher

          # Search for gene transcripts
          searcher = GeneSearcher(species="human")
          transcripts = searcher.search_gene("TP53")

          # Design siRNAs
          designer = SiRNADesigner()
          candidates = designer.design_from_transcripts(transcripts)
          ```

          ### Available Commands
          ```bash
          sirnaforge workflow   # Complete pipeline: gene → siRNAs
          sirnaforge search     # Gene/transcript search
          sirnaforge design     # siRNA candidate generation
          sirnaforge validate   # Input file validation
          sirnaforge config     # Show configuration
          sirnaforge cache      # Manage miRNA databases
          sirnaforge version    # Version information
          ```

          ## 🔧 Key Features in v${{ needs.validate-release.outputs.version }}

          - 🎯 **Smart siRNA Design** - Thermodynamic scoring with 90% duplex binding weight
          - 🔬 **Off-target Analysis** - BWA-MEM2 alignment across human/rat/rhesus genomes
          - 🧪 **ViennaRNA Integration** - Secondary structure prediction for accuracy
          - 📊 **Pandera Data Schemas** - Type-safe output validation and formatting
          - ⚡ **uv Package Manager** - 10-100x faster than pip for dependencies
          - 🐳 **Production Docker** - Pre-built images with all bioinformatics tools
          - 🔬 **Nextflow Pipeline** - Scalable execution with automatic parallelization

          ## 🧪 Testing & Quality

          **This release passed comprehensive validation:**
          - ✅ **31 Unit Tests** (30-35s) - Core algorithm validation
          - ✅ **30 Local Python Tests** (12-15s) - Fastest development iteration
          - ✅ **Docker Smoke Tests** (256MB RAM) - Critical functionality verification
          - ✅ **Integration Tests** (2GB RAM) - End-to-end workflow validation
          - ✅ **Code Quality** - Ruff, MyPy, Black formatting with 90%+ coverage

          ## 🔗 Resources & Links

          ### 📚 Documentation & Guides
          - 📖 [**Full Documentation**](https://${{ needs.validate-release.outputs.owner-lower }}.github.io/${{ needs.validate-release.outputs.name-lower }}) - Complete user guide
          - 🚀 [**Quick Start Guide**](https://github.com/${{ needs.validate-release.outputs.repository-lower }}#-quick-start) - Get running in 5 minutes
          - 🧪 [**API Reference**](https://${{ needs.validate-release.outputs.owner-lower }}.github.io/${{ needs.validate-release.outputs.name-lower }}/api) - Python API documentation
          - 🐍 [**Development Guide**](https://github.com/${{ needs.validate-release.outputs.repository-lower }}/blob/main/CONTRIBUTING.md) - Contributing instructions

          ### 🐳 Container Images
          - 🏷️ **Versioned:** `${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }}`
          - 🔄 **Latest:** `${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:latest`
          - 📦 **Registry:** [${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}](${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }})

          ### 🛠️ Development & Support
          - 💻 [**Source Code**](https://github.com/${{ needs.validate-release.outputs.repository-lower }}) - Full repository
          - 🐛 [**Report Issues**](https://github.com/${{ needs.validate-release.outputs.repository-lower }}/issues) - Bug reports & feature requests
          - 💬 [**Discussions**](https://github.com/${{ needs.validate-release.outputs.repository-lower }}/discussions) - Community support
          - 📋 [**Changelog**](https://github.com/${{ needs.validate-release.outputs.repository-lower }}/blob/main/CHANGELOG.md) - Version history
          - 🏷️ [**All Releases**](https://github.com/${{ needs.validate-release.outputs.repository-lower }}/releases) - Previous versions

          ---

          **⚡ Quick Verification:**
          ```bash
          # Test Docker image (should complete in ~2 seconds)
          docker run --rm ${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }} sirnaforge version

          # Expected output: siRNAforge v${{ needs.validate-release.outputs.version }}
          ```
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        draft: false

  # Optional: Publish to PyPI using Trusted Publishing (OIDC) if enabled
  publish-pypi:
    name: 📦 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, run-ci, create-release, build-artifacts]
    if: ${{ github.event.inputs.publish_pypi == 'true' && needs.run-ci.result == 'success' && needs.create-release.result == 'success' }}
    permissions:
      id-token: write  # Required for PyPI trusted publisher
      contents: read
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 📥 Download dist artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-dist-${{ needs.validate-release.outputs.version }}
          path: dist/

      - name: 🚀 Publish to PyPI (Trusted Publisher)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          print-hash: true
          verbose: true
          skip-existing: true
          # repository-url: https://test.pypi.org/legacy/  # Uncomment to test against TestPyPI first

      - name: ✅ Publish summary
        run: |
          echo "Published version v${{ needs.validate-release.outputs.version }} to PyPI (if not existing)."

  # Optional: Build and deploy docs for the release
  build-release-docs:
    name: 📚 Build Release Docs
    runs-on: ubuntu-latest
    needs: [validate-release, run-ci]
    if: ${{ github.event.inputs.deploy_docs_release == 'true' && needs.run-ci.result == 'success' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: ⚡ Install uv CLI
        uses: astral-sh/setup-uv@v6
        with:
          activate-environment: false
          enable-cache: true
          cache-suffix: docs-release
      - name: 📦 Install dependencies
        run: uv sync --group dev
      - name: 🏗️ Build documentation (release)
        run: |
          export SIRNAFORGE_RELEASE_VERSION=${{ needs.validate-release.outputs.version }}
          uv run --group dev sphinx-build -b html docs docs/_build/html
          touch docs/_build/html/.nojekyll
      - name: 📤 Upload docs artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-docs-${{ needs.validate-release.outputs.version }}
          path: docs/_build/html
          retention-days: 7

  deploy-release-docs:
    name: 🚀 Deploy Release Docs
    runs-on: ubuntu-latest
    needs: [validate-release, build-release-docs]
    if: ${{ github.event.inputs.deploy_docs_release == 'true' && needs.build-release-docs.result == 'success' }}
    permissions:
      pages: write
      id-token: write
    steps:
    - name: 📥 Download docs artifact
      uses: actions/download-artifact@v4
      with:
        # Use normalized version (without leading 'v') from validate-release to match upload name
        name: release-docs-${{ needs.validate-release.outputs.version }}
        path: docs/_build/html
    - name: 📤 Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs/_build/html
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Publish Docker images only after smoke tests pass and release is created
  publish-docker:
    name: 🐳 Publish Docker Images
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-release, create-release, test-docker-smoke]
    if: github.event.inputs.push_images == 'true' && needs.test-docker-smoke.result == 'success'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📥 Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image-${{ needs.validate-release.outputs.version }}
        path: /tmp/

    - name: 🐳 Load and push Docker image
      run: |
        # Load the image
        docker load --input /tmp/sirnaforge-image.tar

        # Push version-specific tag
        VERSION_TAG="${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${{ needs.validate-release.outputs.version }}"
        docker push "$VERSION_TAG"

        # Push latest tag if this is not a prerelease
        if [ "${{ github.event.inputs.prerelease }}" != "true" ]; then
          LATEST_TAG="${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:latest"
          docker tag "$VERSION_TAG" "$LATEST_TAG"
          docker push "$LATEST_TAG"
          echo "✅ Pushed both version and latest tags"
        else
          echo "✅ Pushed version tag only (prerelease)"
        fi

    - name: 🔐 Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      continue-on-error: true
      with:
        subject-name: ${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}
        push-to-registry: true

  # Final integration test with published images
  final-integration-test:
    name: 🧪 Final Integration Test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-release, create-release, publish-docker, test-docker-smoke]
    if: always() && needs.create-release.result == 'success' && needs.test-docker-smoke.result == 'success'

    steps:
    - name: 🐳 Test published Docker image
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        IMAGE_TAG="${{ env.REGISTRY }}/${{ needs.validate-release.outputs.repository-lower }}:${VERSION}"

        echo "🐳 Testing published image from ${{ env.REGISTRY }}..."
        docker pull "$IMAGE_TAG"

        echo "🧪 Testing CLI functionality..."
        docker run --rm "$IMAGE_TAG" sirnaforge --help

        echo "🧪 Testing version command..."
        docker run --rm "$IMAGE_TAG" sirnaforge version

        echo "✅ Published image works correctly!"

  # Final confirmation
  finalize-release:
    name: ✅ Release Complete
    runs-on: ubuntu-latest
    timeout-minutes: 2
    needs: [validate-release, create-release, test-docker-smoke, test-docker-integration, publish-docker, final-integration-test, publish-pypi, deploy-release-docs]
    if: always() && needs.create-release.result == 'success' && needs.test-docker-smoke.result == 'success'

    steps:
    - name: 🎉 Release Status
      run: |
        echo "✅ Release v${{ needs.validate-release.outputs.version }} completed successfully"
        echo "📦 GitHub Release: ${{ needs.create-release.outputs.release-url }}"
        echo "📁 Repository: ${{ needs.validate-release.outputs.repository-lower }}"
        echo "🏷️ Tag: v${{ needs.validate-release.outputs.version }}"
