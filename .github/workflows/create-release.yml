name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: Release version (e.g., v0.1.0)
        required: true
        type: string
      prerelease:
        description: Mark as pre-release
        required: false
        default: true
        type: boolean
      generate_notes:
        description: Auto-generate release notes
        required: false
        default: true
        type: boolean
      push_images:
        description: Push Docker images to registries
        required: false
        default: true
        type: boolean
permissions:
  contents: write
  packages: write
  attestations: write
  id-token: write
jobs:
  validate-and-prepare:
    name: "🔍 Validate Release"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.content }}
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
    - name: "🐍 Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: "⚡ Install uv CLI"
      uses: astral-sh/setup-uv@v6
      with:
        activate-environment: false
        enable-cache: true
    - name: "📦 Install dependencies"
      run: uv sync --group dev
    - name: "🔍 Validate version format"
      id: version
      run: |
        VERSION="${{ github.event.inputs.version }}"
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          exit 1
        fi
    - name: "🔍 Check pyproject.toml version"
      run: |
        PYPROJECT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "pyproject.toml version: $PYPROJECT_VERSION"
    - name: "🧪 Run tests to ensure quality"
      run: |
        echo "Running quick test suite to ensure release quality..."
        make test-fast
    - name: "📋 Prepare changelog excerpt"
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          VERSION="${{ steps.version.outputs.version }}"
          SECTION=$(sed -n "/## \[${VERSION}\]/,/## \[/p" CHANGELOG.md | sed '$d')
          if [ -n "$SECTION" ]; then
            echo "content<<EOF" >> $GITHUB_OUTPUT
            echo "$SECTION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "content=No specific changelog entry found for this version." >> $GITHUB_OUTPUT
          fi
        else
          echo "content=No changelog available." >> $GITHUB_OUTPUT
        fi
  create-release:
    name: "🏷️ Create GitHub Release"
    runs-on: ubuntu-latest
    needs: validate-and-prepare
    outputs:
      release-id: ${{ steps.create.outputs.id }}
      upload-url: ${{ steps.create.outputs.upload_url }}
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
    - name: "🏷️ Create Git tag"
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        VERSION="v${{ needs.validate-and-prepare.outputs.version }}"
        # Check if tag already exists
        if git rev-parse "$VERSION" >/dev/null 2>&1; then
          echo "⚠️ Tag $VERSION already exists, skipping tag creation"
        else
          git tag -a "$VERSION" -m "Release $VERSION"
          git push origin "$VERSION"
        fi
    - name: "🚀 Create GitHub Release"
      id: create
      run: |
        VERSION="v${{ needs.validate-and-prepare.outputs.version }}"
        RELEASE_BODY="# 🧬 siRNAforge v${{ needs.validate-and-prepare.outputs.version }}
        ${{ needs.validate-and-prepare.outputs.changelog }}"

        PRERELEASE_FLAG=""
        if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
          PRERELEASE_FLAG="--prerelease"
        fi

        gh release create "$VERSION" \
          --title "siRNAforge $VERSION" \
          --notes "$RELEASE_BODY" \
          $PRERELEASE_FLAG
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  docker-build-publish:
    name: "🐳 Build and Publish Docker Images"
    runs-on: ubuntu-latest
    needs:
    - validate-and-prepare
    - create-release
    if: ${{ github.event.inputs.push_images == 'true' }}
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
    - name: "🏷️ Checkout release tag"
      run: |
        git fetch origin
        git checkout v${{ needs.validate-and-prepare.outputs.version }}
    - name: "🔐 Log in to Docker Hub"
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: "🔐 Log in to GHCR"
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: "🏗️ Set up Docker Buildx"
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: 'network=host'
    - name: "Compute lowercase repo for GHCR"
      id: repo
      run: echo "repo_lc=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
    - name: "Extract version from pyproject.toml"
      id: version
      run: |
        VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: "📋 Docker metadata"
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/sirnaforge
          ghcr.io/${{ steps.repo.outputs.repo_lc }}
        tags: |
          type=raw,value=${{ steps.version.outputs.version }}
          type=raw,value=latest,enable={{is_default_branch}}
    - name: "🐳 Build and push Docker images"
      id: push
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./docker/Dockerfile
        push: ${{ github.event.inputs.push_images == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
    - name: "🔐 Generate artifact attestation"
      if: ${{ github.event.inputs.push_images == 'true' }}
      uses: actions/attest-build-provenance@v3
      with:
        subject-name: "ghcr.io/${{ steps.repo.outputs.repo_lc }}"
        subject-digest: "${{ steps.push.outputs.digest }}"
        push-to-registry: true
  docker-integration-tests:
    name: "🧪 Docker Integration Tests"
    runs-on: ubuntu-latest
    needs:
    - validate-and-prepare
    - docker-build-publish
    if: always()
    steps:
    - name: "📥 Checkout code"
      uses: actions/checkout@v4
    - name: "Compute lowercase repo for GHCR"
      id: repo
      run: echo "repo_lc=${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT
    - name: "Set up Python"
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: "⚡ Install uv CLI"
      uses: astral-sh/setup-uv@v6
    - name: "📦 Install test dependencies"
      run: uv pip install --system pytest pytest-docker
    - name: "🐳 Pull Docker image"
      run: docker pull ghcr.io/${{ steps.repo.outputs.repo_lc }}:${{ needs.validate-and-prepare.outputs.version }}
    - name: "🧪 Run Docker integration tests"
      run: |
        export SIRNAFORGE_DOCKER_IMAGE=ghcr.io/${{ steps.repo.outputs.repo_lc }}:${{ needs.validate-and-prepare.outputs.version }}
        pytest tests/docker/ -v --tb=short -m docker
    - name: "📊 Upload test results"
      uses: actions/upload-artifact@v4
      with:
        name: docker-test-results-${{ needs.validate-and-prepare.outputs.version }}
        path: |
          pytest-results.xml
          docker-test-*.log
        retention-days: 7
  finalize-release:
    name: "✅ Finalize Release"
    runs-on: ubuntu-latest
    needs:
    - validate-and-prepare
    - create-release
    - docker-build-publish
    - docker-integration-tests
    if: always() && needs.create-release.result == 'success'
    steps:
    - name: "📊 Release Summary"
      run: |
        REPO_LC="${GITHUB_REPOSITORY,,}"
        VERSION="${{ needs.validate-and-prepare.outputs.version }}"
        echo "# 🎉 Release v${{ needs.validate-and-prepare.outputs.version }} Complete!"
        echo ""
        echo "## 📦 Artifacts Published:"
        echo "- ✅ GitHub Release: https://github.com/${REPO_LC}/releases/tag/v${VERSION}"
        if [ "${{ github.event.inputs.push_images }}" = "true" ]; then
          echo "- 🐳 Docker Images:"
          echo "  - ghcr.io/${REPO_LC}:${VERSION}"
          echo "  - ${{ secrets.DOCKER_USERNAME }}/sirnaforge:${{ needs.validate-and-prepare.outputs.version }}"
          echo "- 🧪 Docker Integration Tests: Passed"
        else
          echo "- 🐳 Docker Images: Skipped (push_images=false)"
        fi
        echo ""
        echo "## 🚀 Next Steps:"
        echo "1. Verify Docker images are available and working (if pushed)"
        echo "2. Test the release with: docker run --rm ghcr.io/${REPO_LC}:${VERSION} sirnaforge --help"
        echo "3. Monitor for any issues and prepare patches if needed"
        echo "4. Celebrate! 🎉"
